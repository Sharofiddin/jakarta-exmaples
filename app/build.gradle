/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.1.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
	id 'war'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	
	implementation 'jakarta.platform:jakarta.jakartaee-api:11.0.0'
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
}
}

application {
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task deployWar(dependsOn: war, description: ">>> RESTDATE deploy task") {
	doLast {
		def FS = File.separator
		def glassfish = 
		  project.properties['glassfish.inst.dir']
		def user = project.properties['glassfish.user']
		def passwd = project.properties['glassfish.password']
		
		File temp = File.createTempFile('asadmin-passwd', '.tmp')
		temp << "AS_ADMIN_${user}=${passwd}\n"
		def sout = new StringBuilder()
		def serr = new StringBuilder()
		def libsDir = "${project.projectDir}${FS}build${FS}libs"
		def proc = """${glassfish}${FS}bin${FS}asadmin 
                 --user ${user} --passwordfile ${temp.absolutePath}
                 deploy ${libsDir}/${project.name}.war""".execute()
		proc.waitForProcessOutput(sout, serr)
		println "out> ${sout}"
		if(serr.toString())
			System.err.println(serr)
		
		temp.delete()
}
}	
	
task undeployWar( description:">>> RESTDATE undeploy task") {
  doLast {
    def FS = File.separator
    def glassfish =
        project.properties['glassfish.inst.dir']
    def user = project.properties['glassfish.user']
    def passwd = project.properties['glassfish.password']
    File temp = File.createTempFile("asadmin-passwd",".tmp")
    temp << "AS_ADMIN_${user}=${passwd}\n"
    def sout = new StringBuilder()
    def serr = new StringBuilder()
    def proc = """${glassfish}${FS}bin${FS}asadmin
        --user ${user} --passwordfile ${temp.absolutePath}
        undeploy ${project.name}""".execute()
    proc.waitForProcessOutput(sout, serr)
    println "out> ${sout}"
    if(serr.toString()) System.err.println(serr)
    temp.delete()
  }
 }
